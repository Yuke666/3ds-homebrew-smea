; Example PICA200 vertex shader

; Uniforms
.fvec projection[4], modelView[4]
.fvec bPositions[25], bQuats[25]

; Constants
.constf consts(0.0, 1.0, 2.0, 3.0)
.alias  zeros consts.xxxx ; Vector full of zeros
.alias  ones  consts.yyyy ; Vector full of ones

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intex v1
.alias innrm v2
.alias weights v3
.alias bones v4

.proc quatMult

	mul r3.x, r0.w, r1.x
	mad r3.x, r0.x, r1.w, r3.x

	mad r3.x, r0.y, r1.z, r3.x
	mad r3.x, -r0.z, r1.y, r3.x

	mul r3.y, r0.w, r1.y
	mad r3.y, -r0.x, r1.z, r3.y

	mad r3.y, r0.y, r1.w, r3.y
	mad r3.y, r0.z, r1.x, r3.y

	mul r3.z, r0.w, r1.z
	mad r3.z, r0.x, r1.y, r3.z

	mad r3.z, -r0.y, r1.x, r3.z
	mad r3.z, r0.z, r1.w, r3.z

	mul r3.w, r0.w, r1.w
	mad r3.w, -r0.x, r1.x, r3.w

	mad r3.w, -r0.y, r1.y, r3.w
	mad r3.w, -r0.z, r1.z, r3.w

	mov r0, r3

.end

.proc quatToMatrix

	add r6, r5, r5 			 			; 2x, 2y, 2z, 2w
	mul r1, r6.xyyy, r5.xyzw 			; 2xx, 2yy, 2yz, 2yw
	mul r2, r6.xxzz, r5.ywzw			; 2xy, 2xw, 2zz, 2zw
	add r3, r1.xxyy, -r2.zzzz 			; (2xx - 2zz), (2xx - 2zz), (2yy - 2zz), (2yy - 2zz)
	
	add r8.x, ones.x, -r3.z 			; A = 1 - (2yy - 2zz)
	add r8.y, r2.x, -r2.w 				; B = 2xy - 2zw
	mad r8.z, r6.x, r5.z, r1.w  		; C = 2xz + 2yw
	
	add r9.x, r2.x, r2.w 				; D = 2xy + 2zw
	add r9.y, ones.x, -r3.x 			; E = 1 - (2xx - 2zz)
	add r9.z, r1.z, -r2.y 				; F = 2yz - 2xw

	mad r10.x, r6.x, r5.z, -r1.w  		; G = 2xz - 2yw
 	add r10.y, r1.z, r2.y 				; H = 2yz + 2xw
	
	add r10.z, r1.x, -r1.y 				; (2xx - 2yy)
	add r10.z, ones.x, -r10.z           ; I = 1 - (2xx - 2yy)

	;mul r10, r8.yzxw, r9.zxyw
	;mad r10, -r9.yzxw, r8.zxyw, r10

.end

.proc main

;	mova bones.x
;	mov r5, bQuats[a0]

	mova bones.x
	mul r5, bQuats[a0], weights.x

	mova bones.y
	mul r2, bQuats[a0], weights.y
	add r5, r2, r5

	mova bones.z
	mul r2, bQuats[a0], weights.z
	add r5, r2, r5

	mova bones.w
	mul r2, bQuats[a0], weights.w
	add r5, r2, r5

	mova zeros.x

	dp4 r0, r5, r5
	rsq r0, r0
	mul r5, r5, r0

	call quatToMatrix

	mov r0.xyz, inpos

	dp3 r1.x, r8, r0
	dp3 r1.y, r9, r0
	dp3 r1.z, r10, r0

	mov r0, r1
	mov r0.w, ones

;	mova bones.x
;	add r0.xyz, bPositions[a0].xyz, r0.xyz
	
	mova bones.x
	mul r1.xyz, bPositions[a0].xyz, weights.x
	add r0.xyz, r1.xyz, r0.xyz
	mova bones.y
	mul r1.xyz, bPositions[a0].xyz, weights.y
	add r0.xyz, r1.xyz, r0.xyz
	mova bones.z
	mul r1.xyz, bPositions[a0].xyz, weights.z
	add r0.xyz, r1.xyz, r0.xyz
	mova bones.w
	mul r1.xyz, bPositions[a0].xyz, weights.w
	add r0.xyz, r1.xyz, r0.xyz
	mova zeros.x

	; r1 = modelView * inpos
	dp4 r1.x, modelView[0], r0
	dp4 r1.y, modelView[1], r0
	dp4 r1.z, modelView[2], r0
	dp4 r1.w, modelView[3], r0

	; outpos = projection * r1
	dp4 outpos.x, projection[0], r1
	dp4 outpos.y, projection[1], r1
	dp4 outpos.z, projection[2], r1
	dp4 outpos.w, projection[3], r1

	; outtex = intex
	mov outtc0, intex

	mov outclr, ones

	; We're finished
	end
.end
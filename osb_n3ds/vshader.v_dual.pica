; Example PICA200 vertex shader

; Uniforms
.fvec projection[4], modelView[4]
.fvec bQuatsR[25], bQuatsD[25]

; Constants
.constf consts(0.0, 1.0, 2.0, 3.0)
.alias  zeros consts.xxxx ; Vector full of zeros
.alias  ones  consts.yyyy ; Vector full of ones

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intex v1
.alias innrm v2
.alias weights v3
.alias bones v4

.proc quatMult

	mul r3.x, r0.w, r1.x
	mul r2, r0.x, r1.w
	add r3.x, r3.x, r2

	mul r2, r0.y, r1.z
	add r3.x, r3.x, r2
	mul r2, r0.z, r1.y
	add r3.x, r3.x, -r2

	mul r3.y, r0.w, r1.y
	mul r2, r0.x, r1.z
	add r3.y, r3.y, -r2

	mul r2, r0.y, r1.w
	add r3.y, r3.y, r2
	mul r2, r0.z, r1.x
	add r3.y, r3.y, r2

	mul r3.z, r0.w, r1.z
	mul r2, r0.x, r1.y
	add r3.z, r3.z, r2

	mul r2, r0.y, r1.x
	add r3.z, r3.z, -r2
	mul r2, r0.z, r1.w
	add r3.z, r3.z, r2

	mul r3.w, r0.w, r1.w
	mul r2, r0.x, r1.x
	add r3.w, r3.w, -r2

	mul r2, r0.y, r1.y
	add r3.w, r3.w, -r2
	mul r2, r0.z, r1.z
	add r3.w, r3.w, -r2

	mov r0, r3

.end

.proc getBlended

	mov r0.xyz, zeros
	mov r0.w, ones

	mov r1.xyz, zeros
	mov r1.w, ones

	mova bones.x
	mul r2, bQuatsR[a0], weights.x
	add r0, r2, r0
	mul r2, bQuatsD[a0], weights.x
	add r1, r2, r1

	mova bones.y
	mul r2, bQuatsR[a0], weights.y
	add r0, r2, r0
	mul r2, bQuatsD[a0], weights.y
	add r1, r2, r1

	mova bones.z
	mul r2, bQuatsR[a0], weights.z
	add r0, r2, r0
	mul r2, bQuatsD[a0], weights.z
	add r1, r2, r1

	mova bones.w
	mul r2, bQuatsR[a0], weights.w
	add r0, r2, r0
	mul r2, bQuatsD[a0], weights.w
	add r1, r2, r1

	mova zeros.x

	dp4 r2, r0, r0
	rsq r2, r2
	mul r0, r0, r2
	mul r1, r1, r2

.end

; params r1, r0

.proc quatRotate


	mov r4, r0

	dp4 r0, r4, r4
	rsq r0, r0
	mul r4, r4, r0

	mov r0, r4

;	mov r1.xyz, inpos ; should be param
	mov r1.w, zeros

	call quatMult

	mov r1.xyz, -r4.xyz
	mov r1.w, r4.w

	call quatMult
	
	mov r0.w, ones

.end

; params r0, r1

.proc cross
	
	mul r2.x, r1.y, r0.z
	mul r3.x, r1.z, r0.y
	add r2.x, r2.x, -r3.x

	mul r2.y, r1.z, r0.x
	mul r3.y, r1.x, r0.z
	add r2.y, r2.y, -r3.y

	mul r2.z, r1.x, r0.y
	mul r3.z, r1.y, r0.x
	add r2.z, r2.z, -r3.z

.end

.proc main

;	mova bones.x
;	mov r4, bQuatsR[a0]

	call getBlended ; r0 = quatR, r1 = quatD

	mov r4, r1 ; r4 = quatD
	mov r3, r0 ; r3 = quatR


	mov r0, r3 ; r0 = quatR
	mov r1, inpos ; r1 = inpos

	call cross ; r0 = cross(quatR.xyz, inpos.xyz)

	mul r1, r3.w, inpos.xyz
	add r1, r0, r1

	mov r0, r3 ; r0 = quatR

	call cross ; r0 = cross( realDQ.xyz, cross(realDQ.xyz, position) + realDQ.w*position );

	mul r0, consts.z, r0 ; r0 = r0 * 2

	add r0, r0, inpos.xyz

	mov r5, r0 ; r5 = position, position = r5

	mov r1, r4 ; r1 = quatD
	mov r0, r3 ; r0 = quatR

	call cross ; r0 = cross(quatR, quatD)

	mov r2, r0 ; r2 = cross(quatR, quatD)

	mul r0, r3.w, r4.xyz ; r0 = quatR.w * quatD.xyz
	mul r1, r4.w, r3.xyz ; r1 = quatD.w * quatR.xyz

	add r0, r0, -r1 ; r0 = realDQ.w * dualDQ.xyz - dualDQ.w * realDQ.xyz

	add r0, r0, r2 ; r0 = (realDQ.w * dualDQ.xyz - dualDQ.w * realDQ.xyz + cross( realDQ.xyz, dualDQ.xyz));

	mul r0, consts.z, r0 ; r0 = r0 * 2


    ;position += 2 * cross( realDQ.xyz, cross(realDQ.xyz, position) + realDQ.w*position );
    ;position += 2 * (realDQ.w * dualDQ.xyz - dualDQ.w * realDQ.xyz + cross( realDQ.xyz, dualDQ.xyz));



;	mova bones.x
;	add r0.xyz, bPositions[a0].xyz, r0.xyz

	; r1 = modelView * inpos
	dp4 r1.x, modelView[0], r0
	dp4 r1.y, modelView[1], r0
	dp4 r1.z, modelView[2], r0
	dp4 r1.w, modelView[3], r0

	; outpos = projection * r1
	dp4 outpos.x, projection[0], r1
	dp4 outpos.y, projection[1], r1
	dp4 outpos.z, projection[2], r1
	dp4 outpos.w, projection[3], r1

	; outtex = intex
	mov outtc0, intex

	mov outclr, ones

	; We're finished
	end
.end